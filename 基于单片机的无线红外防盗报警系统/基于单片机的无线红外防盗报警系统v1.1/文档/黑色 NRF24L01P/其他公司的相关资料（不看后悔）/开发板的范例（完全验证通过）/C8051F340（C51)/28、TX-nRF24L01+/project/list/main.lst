C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:39:26 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: g:\program files\Keil uv3\C51\BIN\C51.EXE ..\Source\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -list\main.lst) OBJECT(.\output\main.obj)

line level    source

   1          #include "C8051F340.H"
   2          #include "nRF24L01.h"
   3          
   4          /*
   5          ================================================================================
   6          Function name : Clock_Init( )
   7          Description   : Initialize the system and USB clock
   8          Input         : None
   9          Output        : None
  10          ================================================================================
  11          */
  12          void Clock_Init( void )
  13          {
  14   1              INT16U iTmp;
  15   1      
  16   1          //Enable internal high speed oscillator
  17   1          OSCICN |= 0x83;
  18   1          //Enable internal 4X MULL
  19   1          if( !( CLKMUL & ( 1<<5 ) ) )
  20   1          {
  21   2              CLKMUL = 0;
  22   2              CLKMUL = 0x00;
  23   2              CLKMUL |= ( 1<<7 );
  24   2              for( iTmp = 0; iTmp < 200; iTmp ++ );
  25   2              CLKMUL |= ( 1<<6 ) | ( 1<<7 );
  26   2              for( iTmp = 0; iTmp < 2000; iTmp ++ );
  27   2              while( !( CLKMUL & ( 1<<5 ) ) );
  28   2          }
  29   1          //USB clock: 48MHz, system clock : 48MHz
  30   1          CLKSEL = 0x03;
  31   1      }
  32          /*
  33          ================================================================================
  34          Function name : SPI_Init( )
  35          Description   : Initialize the SPI bus
  36          Input         : None
  37          Output        : None
  38          ================================================================================
  39          */
  40          void SPI_Init( void )
  41          {
  42   1              SPI0CN = 0x00;
  43   1              SPI0CFG |= ( 1<<6 );
  44   1              SPI0CKR = 10;
  45   1              SPI0CN = 0x01;        //Enable SPI
  46   1              XBR0 |= ( 1<<1 );
  47   1      //strong output
  48   1              P0MDOUT |= ( 1<<0 ) | ( 1<<1 ) | ( 1<<2 ) | ( 1<<3 );
  49   1              P0 |= ( 1<<0 ) | ( 1<<1 ) | ( 1<<2 ) | ( 1<<3 );
  50   1              P0SKIP |= ( 1<<0 );
  51   1      }
  52          /*
  53          ================================================================================
  54          Function name : SPI_ExchangeByte( )
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:39:26 PAGE 2   

  55          Description   : Exchange a byte via the SPI bus
  56          Input         : -Byte, The byte sent
  57          Output        : The byte returned
  58          ================================================================================
  59          */
  60          INT8U SPI_ExchangeByte( INT8U Byte )
  61          {
  62   1              SPI0CN &= ~( 1<<7 );
  63   1              while( !( SPI0CN & ( 1<<1 ) ) );
  64   1              SPI0DAT = Byte;
  65   1              while( !( SPI0CN & ( 1<<7 ) ) );
  66   1              SPI0CN &= ~( 1<<7 );
  67   1              return SPI0DAT;
  68   1      
  69   1              /*INT8U RetValue = 0;
  70   1              INT8S btmp;
  71   1              for( btmp = 7; btmp >= 0; btmp -- )
  72   1              {
  73   1                      SCK_LOW( );
  74   1                      MISO_HIGH( );
  75   1                      if( Byte & ( 1<<btmp ) )
  76   1                      {
  77   1                              MOSI_HIGH( );
  78   1                      }
  79   1                      else
  80   1                      {
  81   1                              MOSI_LOW( );
  82   1                      }
  83   1                      SCK_HIGH( );
  84   1                      if( GET_MISO( ) ) RetValue |= ( 1<<btmp );
  85   1              }
  86   1              SCK_LOW( );
  87   1              return RetValue;*/
  88   1      }
  89          /*
  90          ================================================================================
  91          * Name        : Timer1_Init( )
  92          * Description : Initialize the timer1 for baudrate
  93          * Input       : None
  94          * Output      : None
  95          * Note        : None
  96          ================================================================================
  97          *///9600
  98          void Timer1_Init( void )
  99          {
 100   1          TH1 = 0x30;
 101   1          TL1 = 0x30;
 102   1          TCON &= 0x3f;
 103   1          TMOD &= 0x0F;
 104   1          TMOD |= ( 2<<4 );
 105   1          CKCON |= 0x00 | ( 0<<3 );
 106   1              TCON |= ( 1<<6 );
 107   1      }
 108          /*
 109          ================================================================================
 110          * Name        : UART0_Init( )
 111          * Description : Initialize the UART0, baudrate
 112          * Input       : None
 113          * Output      : None
 114          * Note        : None
 115          ================================================================================
 116          */
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:39:26 PAGE 3   

 117          static void UART0_Init( void )
 118          {
 119   1          SCON0 = ( 1<<4 );
 120   1      
 121   1          IE |= ( 1<<4 );
 122   1              P0MDOUT |= ( 1<<4 );
 123   1          Timer1_Init( );
 124   1      }
 125          volatile unsigned char *Ptr_Send = 0;
 126          volatile unsigned int SendCount = 0;
 127          volatile unsigned char SendBusy = 0;
 128          static UART0_ISR( void ) interrupt 4
 129          {
 130   1          if( SCON0 & ( 1<<1 ) )
 131   1          {
 132   2              //TX ok
 133   2              SCON0 &= ~( 1<<1 );
 134   2                      if( SendCount != 0 && Ptr_Send != 0 )
 135   2                      {
 136   3                              SendBusy = 1;
 137   3                              SBUF0 = *Ptr_Send;
 138   3                              SendCount--;
 139   3                              Ptr_Send ++;
 140   3                      }
 141   2                      else
 142   2                      {
 143   3                              SendBusy = 0;
 144   3                      }
 145   2      
 146   2          }
 147   1          else if( SCON0 & ( 1<<0 ) )
 148   1          {
 149   2              //RX ok
 150   2              SCON0 &= ~( 1<<0 );
 151   2          }
 152   1      }
 153          void _delay_ms( INT16U x )
 154          {
 155   1          INT16U m;
 156   1          while( x -- )
 157   1          {
 158   2              for( m = 0; m < 5000; m ++ );
 159   2          }
 160   1      }
 161          void UART0_Send( unsigned char *buf, unsigned int size )
 162          {
 163   1              while( SendBusy );
 164   1              Ptr_Send = buf;
 165   1              SendCount = size;
 166   1              SCON0 |= ( 1<<1 );
 167   1      }
 168          void UART0_SendStr( char *str )
 169          {
 170   1          UART0_Send( (INT8U*)str, strlen( str ) );
 171   1      }
 172          
 173          int main( void )
 174           {
 175   1          INT8U tmp, x;
 176   1          char *AskData = "How are you?\r\n";
 177   1          INT8U testbuffer[32];
 178   1      
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:39:26 PAGE 4   

 179   1              XBR1 |= ( 1<<6 );
 180   1              XBR0 |= ( 1<<0 );
 181   1              Clock_Init( );
 182   1          SPI_Init( );
 183   1          UART0_Init( );
 184   1          EA = 1;
 185   1          L01_Init( );
 186   1          L01_SetTXMode( );
 187   1          L01_WriteHoppingPoint( 0 );
 188   1              UART0_SendStr( "nRF24L01P Send Start£¡\r\n" );
 189   1              while( 1 )
 190   1          {
 191   2              for( tmp = 0; tmp < 200; tmp ++ )
 192   2              {
 193   3                  _delay_ms( 10 );
 194   3              }
 195   2                      L01_FlushRX( );
 196   2                      L01_FlushTX( );
 197   2                      UART0_SendStr( "Send:" );
 198   2                      UART0_SendStr( AskData );
 199   2              L01_WriteTXPayload_Ack( AskData, strlen( AskData ) );
 200   2      
 201   2                      while( 1 )
 202   2                      {
 203   3                              tmp = L01_ReadStatusReg( );
 204   3                              //USART_SendChar(tmp); //for test
 205   3                              tmp &= ( 1<<TX_DS ) | ( 1<<MAX_RT ) | ( 1<<RX_DR );
 206   3                              _delay_ms( 1 );
 207   3                              if( tmp != 0 )
 208   3                              {
 209   4                                      break;
 210   4                              }
 211   3      
 212   3                      }
 213   2      
 214   2              if( tmp & ( 1<<TX_DS ) )
 215   2              {
 216   3                  UART0_SendStr( "Send OK!\r\n" );
 217   3                              for( tmp = 0; tmp < 32; tmp ++ )
 218   3                      {
 219   4                          testbuffer[tmp] = 0;
 220   4                      }
 221   3                              x = L01_ReadRXPayload( testbuffer );
 222   3                              UART0_SendStr( "Received reply:" );
 223   3                              UART0_SendStr( testbuffer );
 224   3              }
 225   2              if( tmp & ( 1<<MAX_RT ) )
 226   2              {
 227   3                  UART0_SendStr( "Send Fail!\r\n" );
 228   3              }
 229   2              if( tmp & ( 1<<RX_DR )  )
 230   2              {
 231   3      
 232   3              }
 233   2              L01_ClearIRQ( IRQ_ALL );
 234   2          }
 235   1      
 236   1              return 0;
 237   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:39:26 PAGE 5   

   CODE SIZE        =    618    ----
   CONSTANT SIZE    =     86    ----
   XDATA SIZE       =      6      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
