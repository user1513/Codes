C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:40:55 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: g:\program files\Keil uv3\C51\BIN\C51.EXE ..\Source\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -list\main.lst) OBJECT(.\output\main.obj)

line level    source

   1          #include "C8051F340.H"
   2          #include "nRF24L01.h"
   3          
   4          /*
   5          ================================================================================
   6          Function name : Clock_Init( )
   7          Description   : Initialize the system and USB clock
   8          Input         : None
   9          Output        : None
  10          ================================================================================
  11          */
  12          void Clock_Init( void )
  13          {
  14   1              INT16U iTmp;
  15   1      
  16   1          //Enable internal high speed oscillator
  17   1          OSCICN |= 0x83;
  18   1          //Enable internal 4X MULL
  19   1          if( !( CLKMUL & ( 1<<5 ) ) )
  20   1          {
  21   2              CLKMUL = 0;
  22   2              CLKMUL = 0x00;
  23   2              CLKMUL |= ( 1<<7 );
  24   2              for( iTmp = 0; iTmp < 200; iTmp ++ );
  25   2              CLKMUL |= ( 1<<6 ) | ( 1<<7 );
  26   2              for( iTmp = 0; iTmp < 2000; iTmp ++ );
  27   2              while( !( CLKMUL & ( 1<<5 ) ) );
  28   2          }
  29   1          //USB clock: 48MHz, system clock : 48MHz
  30   1          CLKSEL = 0x03;
  31   1      }
  32          /*
  33          ================================================================================
  34          Function name : SPI_Init( )
  35          Description   : Initialize the SPI bus
  36          Input         : None
  37          Output        : None
  38          ================================================================================
  39          */
  40          void SPI_Init( void )
  41          {
  42   1              SPI0CN = 0x00;
  43   1              SPI0CFG |= ( 1<<6 );
  44   1              SPI0CKR = 10;
  45   1              SPI0CN = 0x01;        //Enable SPI
  46   1              XBR0 |= ( 1<<1 );
  47   1      //strong output
  48   1              P0MDOUT |= ( 1<<0 ) | ( 1<<1 ) | ( 1<<2 ) | ( 1<<3 );
  49   1              P0 |= ( 1<<0 ) | ( 1<<1 ) | ( 1<<2 ) | ( 1<<3 );
  50   1              P0SKIP |= ( 1<<0 );
  51   1      }
  52          /*
  53          ================================================================================
  54          Function name : SPI_ExchangeByte( )
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:40:55 PAGE 2   

  55          Description   : Exchange a byte via the SPI bus
  56          Input         : -Byte, The byte sent
  57          Output        : The byte returned
  58          ================================================================================
  59          */
  60          INT8U SPI_ExchangeByte( INT8U Byte )
  61          {
  62   1              SPI0CN &= ~( 1<<7 );
  63   1              while( !( SPI0CN & ( 1<<1 ) ) );
  64   1              SPI0DAT = Byte;
  65   1              while( !( SPI0CN & ( 1<<7 ) ) );
  66   1              SPI0CN &= ~( 1<<7 );
  67   1              return SPI0DAT;
  68   1      
  69   1              /*INT8U RetValue = 0;
  70   1              INT8S btmp;
  71   1              for( btmp = 7; btmp >= 0; btmp -- )
  72   1              {
  73   1                      SCK_LOW( );
  74   1                      MISO_HIGH( );
  75   1                      if( Byte & ( 1<<btmp ) )
  76   1                      {
  77   1                              MOSI_HIGH( );
  78   1                      }
  79   1                      else
  80   1                      {
  81   1                              MOSI_LOW( );
  82   1                      }
  83   1                      SCK_HIGH( );
  84   1                      if( GET_MISO( ) ) RetValue |= ( 1<<btmp );
  85   1              }
  86   1              SCK_LOW( );
  87   1              return RetValue;*/
  88   1      }
  89          /*
  90          ================================================================================
  91          * Name        : Timer1_Init( )
  92          * Description : Initialize the timer1 for baudrate
  93          * Input       : None
  94          * Output      : None
  95          * Note        : None
  96          ================================================================================
  97          *///9600
  98          void Timer1_Init( void )
  99          {
 100   1          TH1 = 0x30;
 101   1          TL1 = 0x30;
 102   1          TCON &= 0x3f;
 103   1          TMOD &= 0x0F;
 104   1          TMOD |= ( 2<<4 );
 105   1          CKCON |= 0x00 | ( 0<<3 );
 106   1              TCON |= ( 1<<6 );
 107   1      }
 108          /*
 109          ================================================================================
 110          * Name        : UART0_Init( )
 111          * Description : Initialize the UART0, baudrate
 112          * Input       : None
 113          * Output      : None
 114          * Note        : None
 115          ================================================================================
 116          */
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:40:55 PAGE 3   

 117          static void UART0_Init( void )
 118          {
 119   1          SCON0 = ( 1<<4 );
 120   1      
 121   1          IE |= ( 1<<4 );
 122   1              P0MDOUT |= ( 1<<4 );
 123   1          Timer1_Init( );
 124   1      }
 125          volatile unsigned char *Ptr_Send = 0;
 126          volatile unsigned int SendCount = 0;
 127          volatile unsigned char SendBusy = 0;
 128          static UART0_ISR( void ) interrupt 4
 129          {
 130   1          if( SCON0 & ( 1<<1 ) )
 131   1          {
 132   2              //TX ok
 133   2              SCON0 &= ~( 1<<1 );
 134   2                      if( SendCount != 0 )
 135   2                      {
 136   3                              SendBusy = 1;
 137   3                              SBUF0 = *Ptr_Send++;
 138   3                              SendCount--;
 139   3                      }
 140   2                      else
 141   2                      {
 142   3                              SendBusy = 0;
 143   3                      }
 144   2      
 145   2          }
 146   1          else if( SCON0 & ( 1<<0 ) )
 147   1          {
 148   2              //RX ok
 149   2              SCON0 &= ~( 1<<0 );
 150   2          }
 151   1      }
 152          void _delay_ms( INT16U x )
 153          {
 154   1          INT16U m;
 155   1          while( x -- )
 156   1          {
 157   2              for( m = 0; m < 5000; m ++ );
 158   2          }
 159   1      }
 160          void UART0_Send( unsigned char *buf, unsigned int size )
 161          {
 162   1              while( SendBusy );
 163   1              Ptr_Send = buf;
 164   1              SendCount = size;
 165   1              SCON0 |= ( 1<<1 );
 166   1              while( SendBusy );
 167   1      }
 168          void UART0_SendStr( char *str )
 169          {
 170   1          UART0_Send( (INT8U*)str, strlen( str ) );
 171   1      }
 172          
 173          int main( void )
 174           {
 175   1          INT8U tmp;
 176   1          INT8U testbuffer[32];
 177   1              char *ReplayData = "Fine, thanks!\r\n";
 178   1              XBR1 = 0x40;
C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:40:55 PAGE 4   

 179   1              XBR0 |= ( 1<<0 );
 180   1              Clock_Init( );
 181   1          SPI_Init( );
 182   1          UART0_Init( );
 183   1          EA = 1;
 184   1          L01_Init( );
 185   1          L01_SetRXMode( );
 186   1          L01_WriteHoppingPoint( 0 );
 187   1              UART0_SendStr( "nRF24L01P Received start!\r\n" );
 188   1          while( 1 )
 189   1          {
 190   2                      L01_FlushRX( );
 191   2                      L01_FlushTX( );
 192   2                      L01_WriteRXPayload_InAck( ReplayData, strlen( ReplayData ) );
 193   2                      while( 1 )
 194   2                      {
 195   3                              tmp = L01_ReadStatusReg( );
 196   3                              tmp &= ( 1<<TX_DS ) | ( 1<<MAX_RT ) | ( 1<<RX_DR );
 197   3                              _delay_ms( 1 );
 198   3                              if( tmp != 0 )
 199   3                              {
 200   4                                      break;
 201   4                              }
 202   3                      }
 203   2      
 204   2              if( tmp & ( 1<<TX_DS ) )
 205   2              {
 206   3               //   USART_SendStr( "发送成功\r\n" );
 207   3              }
 208   2              else if( tmp & ( 1<<MAX_RT ) )
 209   2              {
 210   3               //   USART_SendStr( "发送失败\r\n" );
 211   3              }
 212   2              else if( tmp & ( 1<<RX_DR )  )
 213   2              {
 214   3                              L01_WriteRXPayload_InAck( ReplayData, strlen( ReplayData ) );
 215   3                  UART0_SendStr( "Received data:" );
 216   3                              for( tmp = 0; tmp < 32; tmp ++ )
 217   3                      {
 218   4                          testbuffer[tmp] = 0;
 219   4                      }
 220   3                              tmp = L01_ReadRXPayload( testbuffer );
 221   3                              UART0_SendStr( testbuffer);
 222   3                              UART0_SendStr( "Send reply:" );
 223   3                              UART0_SendStr( ( char*) ReplayData );
 224   3              }
 225   2              L01_ClearIRQ( IRQ_ALL );
 226   2          }
 227   1      
 228   1              return 0;
 229   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    571    ----
   CONSTANT SIZE    =     71    ----
   XDATA SIZE       =      6      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V8.16   MAIN                                                                  11/09/2011 23:40:55 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
