C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MCU_JIESHOU
OBJECT MODULE PLACED IN MCU_jieshou.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MCU_jieshou.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          
   4          typedef unsigned char uchar;
   5          typedef unsigned char uint;
   6          
   7          //****************************************NRF24L01端口定义***************************************
   8          sbit    MISO    =P1^3;
   9          sbit    MOSI    =P1^4;
  10          sbit    SCK         =P1^2;
  11          sbit    CE          =P1^1;
  12          sbit    CSN             =P3^2;
  13          sbit    IRQ             =P3^3;
  14          //************************************按键***************************************************
  15          sbit    KEY1=P3^6;
  16          sbit    KEY2=P3^7;
  17          //************************************数码管位选*********************************************
  18          sbit    led3=P2^0;
  19          sbit    led2=P2^1;
  20          sbit    led1=P2^2;
  21          sbit    led0=P2^3;
  22          //************************************蜂明器***************************************************
  23          sbit    BELL=P3^4;
  24          //***********************************数码管0-9编码***********************************************
  25          uchar count1=0,count2=0;
  26          uchar seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
  27          //******************************************************************************************
  28          
  29          uint    bdata sta;                              //NRF24L01状态标志
  30          sbit    RX_DR   =sta^6;                         
  31          sbit    TX_DS   =sta^5;
  32          sbit    MAX_RT  =sta^4;
  33          //*************************************NRF24L01**************************************************
  34          
  35          #define TX_ADR_WIDTH    5       // 本机地址宽度设置
  36          #define RX_ADR_WIDTH    5       // 接收方地址宽度设置
  37          
  38          #define TX_PLOAD_WIDTH  20              // 4 字节数据长度
  39          #define RX_PLOAD_WIDTH  20              // 4 字节数据长度
  40          
  41          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //本地地址
  42          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //接收地址
  43          //*****************************NRF24L01寄存器指令，详细请对照，Page18******************************
  44          
  45          #define READ_REG        0x00    // 读寄存器指令
  46          #define WRITE_REG       0x20    // 写寄存器指令
  47          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  48          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  49          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  50          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  51          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  52          #define NOP             0xFF    // 保留
  53          //****************************SPI(nRF24L01)寄存器地址，详细请对照，Page18-24**********************
  54          
  55          #define CONFIG          0x00   // 配置收发状态，CRC校验模式以及收发状态响应方式
C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 2   

  56          #define EN_AA           0x01   // 自动应答功能设置
  57          #define EN_RXADDR       0x02   // 可用信道设置
  58          #define SETUP_AW        0x03   // 收发地址宽度设置
  59          #define SETUP_RETR      0x04   // 自动重发功能设置
  60          #define RF_CH           0x05   // 工作频率设置
  61          #define RF_SETUP        0x06   // 发射速率、功耗功能设置
  62          #define STATUS          0x07   // 状态寄存器
  63          #define OBSERVE_TX      0x08   // 发送监测功能
  64          #define CD              0x09   // 地址检测           
  65          #define RX_ADDR_P0      0x0A   // 频道0接收数据地址
  66          #define RX_ADDR_P1      0x0B   // 频道1接收数据地址
  67          #define RX_ADDR_P2      0x0C   // 频道2接收数据地址
  68          #define RX_ADDR_P3      0x0D   // 频道3接收数据地址
  69          #define RX_ADDR_P4      0x0E   // 频道4接收数据地址
  70          #define RX_ADDR_P5      0x0F   // 频道5接收数据地址
  71          #define TX_ADDR         0x10   // 发送地址寄存器
  72          #define RX_PW_P0        0x11   // 接收频道0接收数据长度
  73          #define RX_PW_P1        0x12   // 接收频道0接收数据长度
  74          #define RX_PW_P2        0x13   // 接收频道0接收数据长度
  75          #define RX_PW_P3        0x14   // 接收频道0接收数据长度
  76          #define RX_PW_P4        0x15   // 接收频道0接收数据长度
  77          #define RX_PW_P5        0x16   // 接收频道0接收数据长度
  78          #define FIFO_STATUS     0x17   // FIFO栈入栈出状态寄存器设置
  79          //************************************NRF24L01函数申明**********************************************
  80          
  81          void Delay(unsigned int s);
  82          void inerDelay_us(unsigned char n);
  83          void init_NRF24L01(void);
  84          uint SPI_RW(uint uchar);
  85          uchar SPI_Read(uchar reg);
  86          void SetRX_Mode(void);
  87          uint SPI_RW_Reg(uchar reg, uchar value);
  88          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
  89          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
  90          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
  91          void nRF24L01_TxPacket(unsigned char * tx_buf);
  92          
  93          //*****************************************长延时*****************************************
  94          void Delay(unsigned int s)
  95          {
  96   1              unsigned int i;
  97   1              for(i=0; i<s; i++);
  98   1              for(i=0; i<s; i++);
  99   1      }
 100          
 101          /******************************************************************************************
 102          /*延时函数
 103          /******************************************************************************************/
 104          void inerDelay_us(unsigned char n)
 105          {
 106   1              for(;n>0;n--)
 107   1                      _nop_();
 108   1      }
 109          //****************************************************************************************
 110          /*NRF24L01初始化
 111          //***************************************************************************************/
 112          void init_NRF24L01(void)
 113          {
 114   1          inerDelay_us(100);
 115   1              CE=0;    // chip enable
 116   1              CSN=1;   // Spi disable 
 117   1              SCK=0;   // Spi clock line init high
C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 3   

 118   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 119   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 120   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 121   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
 122   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 123   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为4字节
 124   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1Mkbps，发射功率为最大值0dB
 125   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 126   1      }
 127          /****************************************************************************************************
 128          /*函数：uint SPI_RW(uint uchar)
 129          /*功能：NRF24L01的SPI写时序,详细看时序图，Page19
 130          /****************************************************************************************************/
 131          uint SPI_RW(uint uchar)
 132          {
 133   1              uint bit_ctr;
 134   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 135   1              {
 136   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
 137   2                      uchar = (uchar << 1);           // shift next bit into MSB..
 138   2                      SCK = 1;                      // Set SCK high..
 139   2                      uchar |= MISO;                    // capture current MISO bit
 140   2                      SCK = 0;                          // ..then set SCK low again
 141   2              }
 142   1          return(uchar);                        // return read uchar
 143   1      }
 144          /****************************************************************************************************
 145          /*函数：uchar SPI_Read(uchar reg)
 146          /*功能：NRF24L01的SPI时序,详细看时序图，Page19
 147          /****************************************************************************************************/
 148          uchar SPI_Read(uchar reg)
 149          {
 150   1              uchar reg_val;
 151   1              
 152   1              CSN = 0;                // CSN low, initialize SPI communication...
 153   1              SPI_RW(reg);            // Select register to read from..
 154   1              reg_val = SPI_RW(0);    // ..then read registervalue
 155   1              CSN = 1;                // CSN high, terminate SPI communication
 156   1              
 157   1              return(reg_val);        // return register value
 158   1      }
 159          /****************************************************************************************************/
 160          /*功能：NRF24L01读写寄存器函数,
 161          /****************************************************************************************************/
 162          uint SPI_RW_Reg(uchar reg, uchar value)
 163          {
 164   1              uint status;
 165   1              
 166   1              CSN = 0;                   // CSN low, init SPI transaction
 167   1              status = SPI_RW(reg);      // select register
 168   1              SPI_RW(value);             // ..and write value to it..
 169   1              CSN = 1;                   // CSN high again
 170   1              
 171   1              return(status);            // return nRF24L01 status uchar
 172   1      }
 173          /****************************************************************************************************/
 174          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 175          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 176          /****************************************************************************************************/
 177          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 178          {
 179   1              uint status,uchar_ctr;
C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 4   

 180   1              
 181   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 182   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 183   1              
 184   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 185   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 186   1              
 187   1              CSN = 1;                           
 188   1              
 189   1              return(status);                    // return nRF24L01 status uchar
 190   1      }
 191          /*********************************************************************************************************
 192          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 193          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 194          /*********************************************************************************************************
             -/
 195          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 196          {
 197   1              uint status,uchar_ctr;
 198   1              
 199   1              CSN = 0;            //SPI使能       
 200   1              status = SPI_RW(reg);   
 201   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 202   1                      SPI_RW(*pBuf++);
 203   1              CSN = 1;           //关闭SPI
 204   1              return(status);    // 
 205   1      }
 206          /*
 207          /****************************************************************************************************
 208          /*函数：void SetRX_Mode(void)
 209          /*功能：数据接收配置 
 210          /****************************************************************************************************/
 211          void SetRX_Mode(void)
 212          {
 213   1              CE=0;
 214   1              //SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);  
 215   1              // IRQ收发完成中断响应，16位CRC，主接收，由于已经配置好所以不用再重复配置，只要激发就可以了
 216   1              CE = 1; 
 217   1              inerDelay_us(130);
 218   1      }
 219          /******************************************************************************************************
 220          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 221          /*功能：数据读取后放如rx_buf接收缓冲区中
 222          /******************************************************************************************************/
 223          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 224          {
 225   1          unsigned char revale=0;
 226   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 227   1              if(RX_DR)                               // 判断是否接收到数据
 228   1              {
 229   2                  CE = 0;                     //SPI使能
 230   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 231   2                      revale =1;                      //读取数据完成标志
 232   2              }
 233   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 234   1              return revale;
 235   1      }
 236          
 237          /*********************************************************************************************************
             -**
 238          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 239          /*功能：发送 tx_buf中数据
C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 5   

 240          /*********************************************************************************************************
             -*
 241          void nRF24L01_TxPacket(unsigned char * tx_buf)
 242          {
 243                  CE=0;                   //StandBy I模式 
 244                  SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 245                  SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据    
 246                  SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 247                  CE=1;            //置高CE，激发数据发送
 248                  inerDelay_us(10);
 249          }
 250          */
 251          //***********************************数据显示*************************************************************
             -*
 252          void  dis_zhuye()
 253          {
 254   1      
 255   1              P0=seg[count2%10];
 256   1              led0=0;
 257   1              Delay(40);
 258   1              led0=1;
 259   1              P0=seg[count2/10];
 260   1              led1=0;
 261   1              Delay(40);
 262   1              led1=1;
 263   1              P0=seg[count1%10];
 264   1              led2=0;
 265   1              Delay(40);
 266   1              led2=1;
 267   1              P0=seg[count1/10];
 268   1              led3=0;
 269   1              Delay(40);
 270   1              led3=1;
 271   1      }
 272          //************************************主函数************************************************************
 273          void main(void)
 274          {
 275   1              uchar RxBuf[20]={0};                             //4字节发送数据缓冲区 
 276   1          init_NRF24L01() ;                            //NRF24L01初始化配置
 277   1              Delay(6000);
 278   1              while(1)
 279   1              {
 280   2                      SetRX_Mode();                                   //激发数据接收
 281   2                      nRF24L01_RxPacket(RxBuf);
 282   2                      if(RxBuf[0])    //判断是否收到数据
 283   2                      {
 284   3                                                      
 285   3                      if(RxBuf[0]==0x11)              //A队+1
 286   3                              {
 287   4                              count1=count1+1;
 288   4                              }
 289   3                      if(RxBuf[0]==0x21)             //A队+2
 290   3                              {
 291   4                              count1=count1+2;
 292   4                              }
 293   3                      if(RxBuf[0]==0x31)            //A队+3
 294   3                              {
 295   4                              count1=count1+3;
 296   4                              }
 297   3                      if(RxBuf[0]==0x41)           //B队+1
 298   3                              {
 299   4                              count2=count2+1;
C51 COMPILER V7.06   MCU_JIESHOU                                                           10/28/2008 22:53:53 PAGE 6   

 300   4                              }
 301   3                      if(RxBuf[0]==0x51)          //B队+2
 302   3                              {
 303   4                              count2=count2+2;
 304   4                              }
 305   3                      if(RxBuf[0]==0x61)         //B队+3
 306   3                              {
 307   4                              count2=count2+3;
 308   4                              }
 309   3                      if(RxBuf[0]==0x71)        //B队-1
 310   3                              {
 311   4                              count1=count1-1;
 312   4                              }
 313   3                      if(RxBuf[0]==0x91)       //B队-1
 314   3                              {
 315   4                              count2=count2-1;
 316   4                              }       
 317   3                      }
 318   2                       dis_zhuye();                   //信息显示
 319   2                       RxBuf[0] = 0x00;    //清接收缓冲区，方式重复计数       
 320   2              }
 321   1              
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    540    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      33
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
