C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCDJLX12864
OBJECT MODULE PLACED IN .\Objects\lcdjlx12864.obj
COMPILER INVOKED BY: F:\KEILC51+MDK\C51\BIN\C51.EXE lcdjlx12864.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\lcdjlx12864.lst) OBJECT(.\Objects\lcdjlx12864.obj)

line level    source

   1          #include "lcdjlx12864.h"
   2          
   3          
   4          void delay(int n_ms)               
   5          {
   6   1              int j,k;
   7   1              for(j=0;j<n_ms;j++)
   8   1              for(k=0;k<110;k++);
   9   1      }
  10          //短延时
  11          void delay_us(int n_us)               
  12          {
  13   1              int j,k;
  14   1              for(j=0;j<n_us;j++)
  15   1              for(k=0;k<1;k++);
  16   1      }
  17          
  18          
  19          //写指令到LCD模块
  20          void transfer_command_lcd(int data1)   
  21          {
  22   1              char i;
  23   1              lcd_cs1=0;
  24   1              lcd_rs=0;
  25   1              for(i=0;i<8;i++)
  26   1         {
  27   2                      lcd_sclk=0; 
  28   2                      //delay_us(10);  //加少量延时
  29   2                      if(data1&0x80) lcd_sid=1;
  30   2                      else lcd_sid=0;
  31   2                      lcd_sclk=1;
  32   2                      //delay_us(10);  //加少量延时
  33   2                      data1=data1<<=1;
  34   2         }
  35   1              lcd_cs1=1;
  36   1      }
  37          
  38          //写数据到LCD模块
  39          void transfer_data_lcd(int data1)
  40          {
  41   1              char i;
  42   1              lcd_cs1=0;
  43   1              lcd_rs=1;
  44   1              for(i=0;i<8;i++)
  45   1              {
  46   2                      lcd_sclk=0;
  47   2                      if(data1&0x80) lcd_sid=1;
  48   2                      else lcd_sid=0;
  49   2                      lcd_sclk=1;
  50   2                      data1=data1<<=1;
  51   2              }
  52   1              lcd_cs1=1;
  53   1      }
  54          
C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 2   

  55          
  56          
  57          
  58          //LCD模块初始化
  59          void initial_lcd()
  60          {
  61   1              lcd_reset=0;                    //低电平复位
  62   1              delay(100);
  63   1              lcd_reset=1;                    //复位完毕
  64   1              delay(100);        
  65   1              transfer_command_lcd(0xe2);      //软复位
  66   1              delay(5);
  67   1              transfer_command_lcd(0x2c);  //升压步聚1
  68   1              delay(50);      
  69   1              transfer_command_lcd(0x2e);  //升压步聚2
  70   1              delay(50);
  71   1              transfer_command_lcd(0x2f);  //升压步聚3
  72   1              delay(5);
  73   1              transfer_command_lcd(0x23);  //粗调对比度，可设置范围0x20～0x27
  74   1              transfer_command_lcd(0x81);  //微调对比度
  75   1              transfer_command_lcd(0x28);  //微调对比度的值，可设置范围0x00～0x3f
  76   1              transfer_command_lcd(0xa2);  //1/9偏压比（bias）
  77   1              transfer_command_lcd(0xc8);  //行扫描顺序：从上到下
  78   1              transfer_command_lcd(0xa0);  //列扫描顺序：从左到右
  79   1              transfer_command_lcd(0x40);  //起始行：第一行开始
  80   1              transfer_command_lcd(0xaf);  //开显示
  81   1      }
  82          
  83          void lcd_address(uint page,uint column)
  84          {
  85   1              column=column-0x01;
  86   1              transfer_command_lcd(0xb0+page-1);   //设置页地址，每8行为一页，全屏共64行，被分成8页
  87   1              transfer_command_lcd(0x10+(column>>4&0x0f));    //设置列地址的高4位
  88   1              transfer_command_lcd(column&0x0f);      //设置列地址的低4位     
  89   1      }
  90          
  91          //全屏清屏
  92          void clear_screen()
  93          {
  94   1              unsigned char i,j;
  95   1              
  96   1                      
  97   1              for(i=0;i<9;i++)
  98   1              {
  99   2                      transfer_command_lcd(0xb0+i);
 100   2                      transfer_command_lcd(0x10);
 101   2                      transfer_command_lcd(0x00);
 102   2                      for(j=0;j<132;j++)
 103   2                      {
 104   3                              transfer_data_lcd(0x00);
 105   3                      }
 106   2              }
 107   1      }
 108          
 109          //显示128x64点阵图像
 110          void display_128x64(uchar *dp)
 111          {
 112   1              uint i,j;
 113   1              
 114   1              for(j=0;j<8;j++)
 115   1              {
 116   2                      lcd_address(j+1,1);
C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 3   

 117   2                      for (i=0;i<128;i++)
 118   2                      {       
 119   3                              transfer_data_lcd(*dp);                                 //写数据到LCD,每写完一个8位的数据后列地址自动加1
 120   3                              dp++;
 121   3                      }
 122   2              }
 123   1      }
 124          
 125          
 126          //显示16x16点阵图像、汉字、生僻字或16x16点阵的其他图标
 127          void display_graphic_16x16(uchar page,uchar column,uchar *dp)
 128          {
 129   1              uint i,j;
 130   1              for(j=0;j<2;j++)
 131   1              {
 132   2                      lcd_address(page+j,column);
 133   2                      for (i=0;i<16;i++)
 134   2                      {       
 135   3                              transfer_data_lcd(*dp);                                 //写数据到LCD,每写完一个8位的数据后列地址自动加1
 136   3                              dp++;
 137   3                      }
 138   2              }
 139   1      }
 140          
 141          
 142          //显示8x16点阵图像、ASCII, 或8x16点阵的自造字符、其他图标
 143          void display_graphic_8x16(uchar page,uchar column,uchar *dp)
 144          {
 145   1              uint i,j;
 146   1              for(j=0;j<2;j++)
 147   1              {
 148   2                      lcd_address(page+j,column);
 149   2                      for (i=0;i<8;i++)
 150   2                      {       
 151   3                              transfer_data_lcd(*dp);                                 //写数据到LCD,每写完一个8位的数据后列地址自动加1
 152   3                              dp++;
 153   3                      }
 154   2              }
 155   1      }
 156          
 157          
 158          //显示5X8点阵图像、ASCII, 或5x8点阵的自造字符、其他图标
 159          void display_graphic_5x8(uchar page,uchar column,uchar *dp)
 160          {
 161   1              uint i;
 162   1              lcd_address(page,column);
 163   1              for (i=0;i<6;i++)
 164   1              {       
 165   2                      transfer_data_lcd(*dp);
 166   2                      dp++;
 167   2              }
 168   1              
 169   1      }
 170          
 171          //送指令到晶联讯字库IC
 172          void send_command_to_ROM( uchar datu )
 173          {
 174   1              uchar i;
 175   1              for(i=0;i<8;i++ )
 176   1              {
 177   2                      Rom_SCK=0;
 178   2                      delay_us(10);
C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 4   

 179   2                      if(datu&0x80)Rom_IN = 1;
 180   2                      else Rom_IN = 0;
 181   2                      datu = datu<<1;
 182   2                      Rom_SCK=1;
 183   2                      delay_us(10);
 184   2              }
 185   1      }
 186          
 187          //从晶联讯字库IC中取汉字或字符数据（1个字节）
 188          static uchar get_data_from_ROM( )
 189          {
 190   1              uchar i;
 191   1              uchar ret_data=0;
 192   1              for(i=0;i<8;i++)
 193   1              {
 194   2                      Rom_OUT=1;
 195   2                      Rom_SCK=0;
 196   2                      //delay_us(1);
 197   2                      ret_data=ret_data<<1;
 198   2                      if( Rom_OUT )
 199   2                              ret_data=ret_data+1;
 200   2                      else
 201   2                              ret_data=ret_data+0;
 202   2                      Rom_SCK=1;
 203   2                      //delay_us(1);
 204   2              }
 205   1              return(ret_data);
 206   1      }
 207          
 208          
 209          //从指定地址读出数据写到液晶屏指定（page,column)座标中
 210          void get_and_write_16x16(ulong fontaddr,uchar page,uchar column)
 211          {
 212   1              uchar i,j,disp_data;
 213   1              Rom_CS = 0;
 214   1              send_command_to_ROM(0x03);
 215   1              send_command_to_ROM((fontaddr&0xff0000)>>16);    //地址的高8位,共24位
 216   1              send_command_to_ROM((fontaddr&0xff00)>>8);               //地址的中8位,共24位
 217   1              send_command_to_ROM(fontaddr&0xff);                              //地址的低8位,共24位
 218   1              for(j=0;j<2;j++)
 219   1              {
 220   2                      lcd_address(page+j,column);
 221   2                      for(i=0; i<16; i++ )
 222   2                  {
 223   3                              disp_data=get_data_from_ROM();
 224   3                              transfer_data_lcd(disp_data);   //写数据到LCD,每写完1字节的数据后列地址自动加1
 225   3                      }
 226   2              }
 227   1              Rom_CS=1;
 228   1      }
 229          
 230          //从指定地址读出数据写到液晶屏指定（page,column)座标中
 231          void get_and_write_8x16(ulong fontaddr,uchar page,uchar column)
 232          {
 233   1              uchar i,j,disp_data;
 234   1              Rom_CS = 0;
 235   1              send_command_to_ROM(0x03);
 236   1              send_command_to_ROM((fontaddr&0xff0000)>>16);    //地址的高8位,共24位
 237   1              send_command_to_ROM((fontaddr&0xff00)>>8);               //地址的中8位,共24位
 238   1              send_command_to_ROM(fontaddr&0xff);                              //地址的低8位,共24位
 239   1              for(j=0;j<2;j++)
 240   1              {
C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 5   

 241   2                      lcd_address(page+j,column);
 242   2                      for(i=0; i<8; i++ )
 243   2                  {
 244   3                              disp_data=get_data_from_ROM();
 245   3                              transfer_data_lcd(disp_data);   //写数据到LCD,每写完1字节的数据后列地址自动加1
 246   3                      }
 247   2              }
 248   1              Rom_CS=1;
 249   1      }
 250          
 251          //从指定地址读出数据写到液晶屏指定（page,column)座标中
 252          void get_and_write_5x8(ulong fontaddr,uchar page,uchar column) 
 253          {
 254   1              uchar i,disp_data;
 255   1              Rom_CS = 0;
 256   1              send_command_to_ROM(0x03);
 257   1              send_command_to_ROM((fontaddr&0xff0000)>>16);    //地址的高8位,共24位
 258   1              send_command_to_ROM((fontaddr&0xff00)>>8);               //地址的中8位,共24位
 259   1              send_command_to_ROM(fontaddr&0xff);                              //地址的低8位,共24位
 260   1              lcd_address(page,column);
 261   1              for(i=0; i<5; i++ )
 262   1              {
 263   2                      disp_data=get_data_from_ROM();
 264   2                      transfer_data_lcd(disp_data);   //写数据到LCD,每写完1字节的数据后列地址自动加1
 265   2              }
 266   1              Rom_CS=1;
 267   1      }
 268          
 269          
 270          //****************************************************************
 271          
 272          
 273          ulong  fontaddr=0;
 274          void display_GB2312_string(uchar page,uchar column,uchar *text)
 275          {
 276   1              uchar i= 0;                     
 277   1              while((text[i]>0x00))
 278   1              {
 279   2                      if(((text[i]>=0xb0) &&(text[i]<=0xf7))&&(text[i+1]>=0xa1))
 280   2                      {                                               
 281   3                              //国标简体（GB2312）汉字在晶联讯字库IC中的地址由以下公式来计算：
 282   3                              //Address = ((MSB - 0xB0) * 94 + (LSB - 0xA1)+ 846)*32+ BaseAdd;BaseAdd=0
 283   3                              //由于担心8位单片机有乘法溢出问题，所以分三部取地址
 284   3                              fontaddr = (text[i]- 0xb0)*94; 
 285   3                              fontaddr += (text[i+1]-0xa1)+846;
 286   3                              fontaddr = (ulong)(fontaddr*32);
 287   3      
 288   3                              get_and_write_16x16(fontaddr,page,column);       //从指定地址读出数据写到液晶屏指定（page,column)座标中
 289   3                              i+=2;
 290   3                              column+=16;
 291   3                      }
 292   2                      else if(((text[i]>=0xa1) &&(text[i]<=0xa3))&&(text[i+1]>=0xa1))
 293   2                      {                                               
 294   3                              //国标简体（GB2312）15x16点的字符在晶联讯字库IC中的地址由以下公式来计算：
 295   3                              //Address = ((MSB - 0xa1) * 94 + (LSB - 0xA1))*32+ BaseAdd;BaseAdd=0
 296   3                              //由于担心8位单片机有乘法溢出问题，所以分三部取地址
 297   3                              fontaddr = (text[i]- 0xa1)*94; 
 298   3                              fontaddr += (text[i+1]-0xa1);
 299   3                              fontaddr = (ulong)(fontaddr*32);
 300   3              
 301   3                              get_and_write_16x16(fontaddr,page,column);       //从指定地址读出数据写到液晶屏指定（page,column)座标中
 302   3                              i+=2;
C51 COMPILER V9.56.0.0   LCDJLX12864                                                       04/27/2018 16:13:49 PAGE 6   

 303   3                              column+=16;
 304   3                      }
 305   2                      else if((text[i]>=0x20) &&(text[i]<=0x7e))      
 306   2                      {                                                                       
 307   3                              fontaddr = (text[i]- 0x20);
 308   3                              fontaddr = (unsigned long)(fontaddr*16);
 309   3                              fontaddr = (unsigned long)(fontaddr+0x3cf80);                   
 310   3      
 311   3                              get_and_write_8x16(fontaddr,page,column);        //从指定地址读出数据写到液晶屏指定（page,column)座标中
 312   3                              i+=1;
 313   3                              column+=8;
 314   3                      }
 315   2                      else
 316   2                              i++;    
 317   2              }
 318   1              
 319   1      }
 320          ulong  font=0;
 321          void display_GB2312_char(uchar page,uchar column,uchar text)
 322          {                                                                               
 323   1                              font = (text- 0x20);
 324   1                              font = (unsigned long)(font*16);
 325   1                              font = (unsigned long)(font+0x3cf80);                   
 326   1                              get_and_write_8x16(font,page,column);    //从指定地址读出数据写到液晶屏指定（page,column)座标中
 327   1              
 328   1      }
 329          
 330          void display_string_5x8(uchar page,uchar column,uchar *text)
 331          {
 332   1              unsigned char i= 0;
 333   1              while((text[i]>0x00))
 334   1              {
 335   2                      
 336   2                      if((text[i]>=0x20) &&(text[i]<=0x7e))   
 337   2                      {                                               
 338   3                              fontaddr = (text[i]- 0x20);
 339   3                              fontaddr = (unsigned long)(fontaddr*8);
 340   3                              fontaddr = (unsigned long)(fontaddr+0x3bfc0);                   
 341   3      
 342   3      
 343   3                              get_and_write_5x8(fontaddr,page,column);         //从指定地址读出数据写到液晶屏指定（page,column)座标中
 344   3      
 345   3                              i+=1;
 346   3                              column+=6;
 347   3                      }
 348   2                      else
 349   2                      i++;    
 350   2              }
 351   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1619    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      63
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
