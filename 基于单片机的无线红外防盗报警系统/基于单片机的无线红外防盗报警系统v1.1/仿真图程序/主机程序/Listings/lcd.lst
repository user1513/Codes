C51 COMPILER V9.59.0.0   LCD                                                               02/23/2019 23:30:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.lst)
                    - TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include "lcd.h"
   2          
   3          /*******************************************************************************
   4          * 函 数 名         : Lcd1602_Delay1ms
   5          * 函数功能       : 延时函数，延时1ms
   6          * 输    入         : c
   7          * 输    出         : 无
   8          * 说    名         : 该函数是在12MHZ晶振下，12分频单片机的延时。
   9          *******************************************************************************/
  10          
  11          void Lcd1602_Delay1ms(uint c)   //误差 0us
  12          {
  13   1          uchar a,b;
  14   1        for (; c>0; c--)
  15   1        {
  16   2           for (b=199;b>0;b--)
  17   2           {
  18   3              for(a=1;a>0;a--);
  19   3           }      
  20   2        }
  21   1            
  22   1      }
  23          
  24          void Lcd1602_display(uint com, uint Data)
  25          {
  26   1        LcdWriteCom(com);
  27   1        LcdWriteData(Data);
  28   1      }
  29          
  30          void Lcd1602_display_String(uint8_t com, uint8_t *Data)
  31          {
  32   1        while(*Data != '\0')
  33   1        {
  34   2            Lcd1602_display(com++, *(Data++));
  35   2        }
  36   1      }
  37          
  38          /*******************************************************************************
  39          * 函 数 名         : LcdWriteCom
  40          * 函数功能       : 向LCD写入一个字节的命令
  41          * 输    入         : com
  42          * 输    出         : 无
  43          *******************************************************************************/
  44          #ifndef   LCD1602_4PINS  //当没有定义这个LCD1602_4PINS时
  45          void LcdWriteCom(uchar com)   //写入命令
  46          {
  47   1        LCD1602_E = 0;     //使能
  48   1        LCD1602_RS = 0;    //选择发送命令
  49   1        LCD1602_RW = 0;    //选择写入
  50   1        
  51   1        LCD1602_DATAPINS = com;     //放入命令
  52   1        Lcd1602_Delay1ms(1);    //等待数据稳定
  53   1      
  54   1        LCD1602_E = 1;            //写入时序
C51 COMPILER V9.59.0.0   LCD                                                               02/23/2019 23:30:13 PAGE 2   

  55   1        Lcd1602_Delay1ms(5);    //保持时间
  56   1        LCD1602_E = 0;
  57   1      }
  58          #else 
              void LcdWriteCom(uchar com)   //写入命令
              {
                LCD1602_E = 0;   //使能清零
                LCD1602_RS = 0;  //选择写入命令
                LCD1602_RW = 0;  //选择写入
              
                LCD1602_DATAPINS = com; //由于4位的接线是接到P0口的高四位，所以传送高四位不用改
                Lcd1602_Delay1ms(1);
              
                LCD1602_E = 1;   //写入时序
                Lcd1602_Delay1ms(5);
                LCD1602_E = 0;
              
                LCD1602_DATAPINS = com << 4; //发送低四位
                Lcd1602_Delay1ms(1);
              
                LCD1602_E = 1;   //写入时序
                Lcd1602_Delay1ms(5);
                LCD1602_E = 0;
              }
              #endif
  80          /*******************************************************************************
  81          * 函 数 名         : LcdWriteData
  82          * 函数功能       : 向LCD写入一个字节的数据
  83          * 输    入         : dat
  84          * 输    出         : 无
  85          *******************************************************************************/       
  86          #ifndef   LCD1602_4PINS      
  87          void LcdWriteData(uchar dat)      //写入数据
  88          {
  89   1        LCD1602_E = 0;  //使能清零
  90   1        LCD1602_RS = 1; //选择输入数据
  91   1        LCD1602_RW = 0; //选择写入
  92   1      
  93   1        LCD1602_DATAPINS = dat; //写入数据
  94   1        Lcd1602_Delay1ms(1);
  95   1      
  96   1        LCD1602_E = 1;   //写入时序
  97   1        Lcd1602_Delay1ms(5);   //保持时间
  98   1        LCD1602_E = 0;
  99   1      }
 100          #else
              void LcdWriteData(uchar dat)      //写入数据
              {
                LCD1602_E = 0;    //使能清零
                LCD1602_RS = 1;   //选择写入数据
                LCD1602_RW = 0;   //选择写入
              
                LCD1602_DATAPINS = dat; //由于4位的接线是接到P0口的高四位，所以传送高四位不用改
                Lcd1602_Delay1ms(1);
              
                LCD1602_E = 1;    //写入时序
                Lcd1602_Delay1ms(5);
                LCD1602_E = 0;
              
                LCD1602_DATAPINS = dat << 4; //写入低四位
                Lcd1602_Delay1ms(1);
              
C51 COMPILER V9.59.0.0   LCD                                                               02/23/2019 23:30:13 PAGE 3   

                LCD1602_E = 1;    //写入时序
                Lcd1602_Delay1ms(5);
                LCD1602_E = 0;
              }
              #endif
 122          /*******************************************************************************
 123          * 函 数 名       : LcdInit()
 124          * 函数功能     : 初始化LCD屏
 125          * 输    入       : 无
 126          * 输    出       : 无
 127          *******************************************************************************/       
 128          #ifndef   LCD1602_4PINS
 129          void LcdInit()              //LCD初始化子程序
 130          {
 131   1        LcdWriteCom(0x38);  //开显示
 132   1        LcdWriteCom(0x0c);  //开显示不显示光标
 133   1        LcdWriteCom(0x06);  //写一个指针加1
 134   1        LcdWriteCom(0x01);  //清屏
 135   1        LcdWriteCom(0x80);  //设置数据指针起点
 136   1      }
 137          #else
              void LcdInit()              //LCD初始化子程序
              {
                LcdWriteCom(0x32);   //将8位总线转为4位总线
                LcdWriteCom(0x28);   //在四位线下的初始化
                LcdWriteCom(0x0c);  //开显示不显示光标
                LcdWriteCom(0x06);  //写一个指针加1
                LcdWriteCom(0x01);  //清屏
                LcdWriteCom(0x80);  //设置数据指针起点
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    168    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
