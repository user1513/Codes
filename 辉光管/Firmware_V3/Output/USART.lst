C51 COMPILER V9.50a   USART                                                                03/26/2016 20:12:55 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Output\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE STC15\USART.C COMPACT OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\Hardw
                    -areDrivers;.\STC15;.\App) DEBUG PRINT(.\Output\USART.lst) TABS(2) OBJECT(.\Output\USART.obj)

line level    source

   1          /**
   2           * 串口驱动程序
   3           * 来源：STC 官方函数库
   4           * 最后更新：2014-07-18
   5           * http://blanboom.org
   6           */
   7          
   8          #include "USART.h"
   9          
  10          
  11          COMx_Define COM1,COM2;
  12          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
  13          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
  14          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
  15          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
  16          
  17          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  18          {
  19   1        u8  i;
  20   1        u32 j;
  21   1        
  22   1        if(UARTx == USART1)
  23   1        {
  24   2          COM1.id = 1;
  25   2          COM1.TX_read    = 0;
  26   2          COM1.TX_write   = 0;
  27   2          COM1.B_TX_busy  = 0;
  28   2          COM1.RX_Cnt     = 0;
  29   2          COM1.RX_TimeOut = 0;
  30   2          COM1.B_RX_OK    = 0;
  31   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  32   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  33   2      
  34   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  35   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  36   2          else                  PS = 0; //低优先级中断
  37   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  38   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  39   2          {
  40   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  41   3            if(j >= 65536UL)  return 2; //错误
  42   3            j = 65536UL - j;
  43   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  44   3            {
  45   4              TR1 = 0;
  46   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  47   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  48   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  49   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  50   4              TH1 = (u8)(j>>8);
  51   4              TL1 = (u8)j;
  52   4              ET1 = 0;  //禁止中断
  53   4              TMOD &= ~0x40;  //定时
  54   4              INT_CLKO &= ~0x02;  //不输出时钟
C51 COMPILER V9.50a   USART                                                                03/26/2016 20:12:55 PAGE 2   

  55   4              TR1  = 1;
  56   4            }
  57   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  58   3            {
  59   4              AUXR &= ~(1<<4);  //Timer stop
  60   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  61   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  62   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  63   4              TH2 = (u8)(j>>8);
  64   4              TL2 = (u8)j;
  65   4              IE2  &= ~(1<<2);  //禁止中断
  66   4              AUXR &= ~(1<<3);  //定时
  67   4              AUXR |=  (1<<4);  //Timer run enable
  68   4            }
  69   3            else return 2;  //错误
  70   3          }
  71   2          else if(COMx->UART_Mode == UART_ShiftRight)
  72   2          {
  73   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  74   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  75   3          }
  76   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  77   2          {
  78   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  79   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  80   3          }
  81   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  82   2          else                ES = 0; //禁止中断
  83   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  84   2          else                REN = 0;  //禁止接收
  85   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  86   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  87   2          else                  PCON2 &= ~(1<<4);
  88   2          return  0;
  89   2        }
  90   1      
  91   1        if(UARTx == USART2)
  92   1        {
  93   2          COM2.id = 2;
  94   2          COM2.TX_read    = 0;
  95   2          COM2.TX_write   = 0;
  96   2          COM2.B_TX_busy  = 0;
  97   2          COM2.RX_Cnt     = 0;
  98   2          COM2.RX_TimeOut = 0;
  99   2          COM2.B_RX_OK    = 0;
 100   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 101   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 102   2      
 103   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 104   2          {
 105   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 106   3            else                  IP2 &= ~1;  //低优先级中断
 107   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 108   3            else                  S2CON &= ~(1<<7); //8bit
 109   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 110   3            if(j >= 65536UL)  return 2; //错误
 111   3            j = 65536UL - j;
 112   3            AUXR &= ~(1<<4);  //Timer stop
 113   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 114   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 115   3            TH2 = (u8)(j>>8);
 116   3            TL2 = (u8)j;
C51 COMPILER V9.50a   USART                                                                03/26/2016 20:12:55 PAGE 3   

 117   3            IE2  &= ~(1<<2);  //禁止中断
 118   3            AUXR |=  (1<<4);  //Timer run enable
 119   3          }
 120   2          else  return 2; //模式错误
 121   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 122   2          else                IE2   &= ~1;    //禁止中断
 123   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 124   2          else                S2CON &= ~(1<<4); //禁止接收
 125   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 126   2        }
 127   1      }
 128          
 129          
 130          
 131          /*************** 装载串口发送缓冲 *******************************/
 132          
 133          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 134          {
 135   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 136   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 137   1      
 138   1        if(COM1.B_TX_busy == 0)   //空闲
 139   1        {  
 140   2          COM1.B_TX_busy = 1;   //标志忙
 141   2          TI = 1;         //触发发送中断
 142   2        }
 143   1      }
 144          
 145          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 146          {
 147   1        TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 148   1        if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 149   1      
 150   1        if(COM2.B_TX_busy == 0)   //空闲
 151   1        {  
 152   2          COM2.B_TX_busy = 1;   //标志忙
 153   2          SET_TI2();        //触发发送中断
 154   2        }
 155   1      }
 156          
 157          void PrintString1(u8 *puts)
 158          {
 159   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 160   1      }
 161          
 162          void PrintString2(u8 *puts)
 163          {
 164   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
 165   1      }
 166          
 167          /*
 168          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 169          {
 170            if(COMx->id == 1) TX1_write2buff(dat);
 171            if(COMx->id == 2) TX2_write2buff(dat);
 172          }
 173          
 174          void PrintString(COMx_Define *COMx, u8 *puts)
 175          {
 176              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 177          }
 178          */
C51 COMPILER V9.50a   USART                                                                03/26/2016 20:12:55 PAGE 4   

 179          
 180          
 181          /********************* UART1中断函数************************/
 182          void UART1_int (void) interrupt UART1_VECTOR
 183          {
 184   1        if(RI)
 185   1        {
 186   2          RI = 0;
 187   2          if(COM1.B_RX_OK == 0)
 188   2          {
 189   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 190   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 191   3            COM1.RX_TimeOut = TimeOutSet1;
 192   3          }
 193   2        }
 194   1      
 195   1        if(TI)
 196   1        {
 197   2          TI = 0;
 198   2          if(COM1.TX_read != COM1.TX_write)
 199   2          {
 200   3            SBUF = TX1_Buffer[COM1.TX_read];
 201   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 202   3          }
 203   2          else  COM1.B_TX_busy = 0;
 204   2        }
 205   1      }
 206          
 207          /********************* UART2中断函数************************/
 208          void UART2_int (void) interrupt UART2_VECTOR
 209          {
 210   1        if(RI2)
 211   1        {
 212   2          CLR_RI2();
 213   2          if(COM2.B_RX_OK == 0)
 214   2          {
 215   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 216   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 217   3            COM2.RX_TimeOut = TimeOutSet2;
 218   3          }
 219   2        }
 220   1      
 221   1        if(TI2)
 222   1        {
 223   2          CLR_TI2();
 224   2          if(COM2.TX_read != COM2.TX_write)
 225   2          {
 226   3            S2BUF = TX2_Buffer[COM2.TX_read];
 227   3            if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 228   3          }
 229   2          else  COM2.B_TX_busy = 0;
 230   2        }
 231   1      
 232   1      }
 233          
 234          
 235          
*** WARNING C291 IN LINE 127 OF STC15\USART.C: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1021    ----
C51 COMPILER V9.50a   USART                                                                03/26/2016 20:12:55 PAGE 5   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =     14       9
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
