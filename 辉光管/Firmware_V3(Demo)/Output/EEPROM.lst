C51 COMPILER V9.50a   EEPROM                                                               04/03/2016 12:31:39 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Output\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE STC15\EEPROM.c COMPACT OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\Hard
                    -wareDrivers;.\STC15;.\App) DEBUG PRINT(.\Output\EEPROM.lst) TABS(2) OBJECT(.\Output\EEPROM.obj)

line level    source

   1          //  本程序是STC系列的内置EEPROM读写程序。
   2          
   3          #include "config.h"
   4          #include "eeprom.h"
   5          
   6          
   7          //========================================================================
   8          // 函数: void ISP_Disable(void)
   9          // 描述: 禁止访问ISP/IAP.
  10          // 参数: non.
  11          // 返回: non.
  12          // 版本: V1.0, 2012-10-22
  13          //========================================================================
  14          void  DisableEEPROM(void)
  15          {
  16   1        ISP_CONTR = 0;      //禁止ISP/IAP操作
  17   1        ISP_CMD   = 0;      //去除ISP/IAP命令
  18   1        ISP_TRIG  = 0;      //防止ISP/IAP命令误触发
  19   1        ISP_ADDRH = 0xff;   //清0地址高字节
  20   1        ISP_ADDRL = 0xff;   //清0地址低字节，指向非EEPROM区，防止误操作
  21   1      }
  22          
  23          //========================================================================
  24          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  25          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  26          // 参数: EE_address:  读出EEPROM的首地址.
  27          //       DataAddress: 读出数据放缓冲的首地址.
  28          //       number:      读出的字节长度.
  29          // 返回: non.
  30          // 版本: V1.0, 2012-10-22
  31          //========================================================================
  32          
  33          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  34          {
  35   1        EA = 0;   //禁止中断
  36   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  37   1        ISP_READ();                 //送字节读命令，命令不需改变时，不需重新送命令
  38   1        do
  39   1        {
  40   2          ISP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
  41   2          ISP_ADDRL = EE_address % 256;   //送地址低字节
  42   2          ISP_TRIG();             //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  43   2                            //送完A5H后，ISP/IAP命令立即被触发启动
  44   2                            //CPU等待IAP完成后，才会继续执行程序。
  45   2          _nop_();
  46   2          *DataAddress = ISP_DATA;      //读出的数据送往
  47   2          EE_address++;
  48   2          DataAddress++;
  49   2        }while(--number);
  50   1      
  51   1        DisableEEPROM();
  52   1        EA = 1;   //重新允许中断
  53   1      }
  54          
C51 COMPILER V9.50a   EEPROM                                                               04/03/2016 12:31:39 PAGE 2   

  55          
  56          /******************** 扇区擦除函数 *****************/
  57          //========================================================================
  58          // 函数: void EEPROM_SectorErase(u16 EE_address)
  59          // 描述: 把指定地址的EEPROM扇区擦除.
  60          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  61          // 返回: non.
  62          // 版本: V1.0, 2013-5-10
  63          //========================================================================
  64          void EEPROM_SectorErase(u16 EE_address)
  65          {
  66   1        EA = 0;   //禁止中断
  67   1                            //只有扇区擦除，没有字节擦除，512字节/扇区。
  68   1                            //扇区中任意一个字节地址都是扇区地址。
  69   1        ISP_ADDRH = EE_address / 256;     //送扇区地址高字节（地址需要改变时才需重新送地址）
  70   1        ISP_ADDRL = EE_address % 256;     //送扇区地址低字节
  71   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  72   1        ISP_ERASE();              //送扇区擦除命令，命令不需改变时，不需重新送命令
  73   1        ISP_TRIG();
  74   1        _nop_();
  75   1        DisableEEPROM();
  76   1        EA = 1;   //重新允许中断
  77   1      }
  78          
  79          //========================================================================
  80          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  81          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  82          // 参数: EE_address:  写入EEPROM的首地址.
  83          //       DataAddress: 写入源数据的缓冲的首地址.
  84          //       number:      写入的字节长度.
  85          // 返回: non.
  86          // 版本: V1.0, 2012-10-22
  87          //========================================================================
  88          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  89          {
  90   1        EA = 0;   //禁止中断
  91   1      
  92   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  93   1        ISP_WRITE();              //送字节写命令，命令不需改变时，不需重新送命令
  94   1        do
  95   1        {
  96   2          ISP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
  97   2          ISP_ADDRL = EE_address % 256;   //送地址低字节
  98   2          ISP_DATA  = *DataAddress;     //送数据到ISP_DATA，只有数据改变时才需重新送
  99   2          ISP_TRIG();
 100   2          _nop_();
 101   2          EE_address++;
 102   2          DataAddress++;
 103   2        }while(--number);
 104   1      
 105   1        DisableEEPROM();
 106   1        EA = 1;   //重新允许中断
 107   1      }
 108          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    156    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      14
   DATA SIZE        =   ----    ----
C51 COMPILER V9.50a   EEPROM                                                               04/03/2016 12:31:39 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
